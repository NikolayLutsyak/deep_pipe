import json
with open('paths.json', 'r') as f:
    p_ = json.load(f)

PATH_TO_SCRIPTS = p_["scripts_path"]

TRAIN_SCRIPT = '{PATH_TO_SCRIPTS}/train_model.py'
PREDICT_SCRIPT = '{PATH_TO_SCRIPTS}/predict.py'
FIND_TRESHOLD = '{PATH_TO_SCRIPTS}/calculate_dice_threshold.py'
BINARIZE = '{PATH_TO_SCRIPTS}/binarize.py'
COMPUTE_DICES = '{PATH_TO_SCRIPTS}/compute_dices.py'
CONFIG_PATH = '{PATH_TO_SCRIPTS}/config.json'


ON_PREDICTED_DATASETS = ['val', 'test']
TRAIN_IDX = 'train_idx'
datasets_idx = expand("{dataset}_idx", dataset=ON_PREDICTED_DATASETS)
LOGS_TO_TNSBRD = './.logs'

predicted = expand("{dataset}_predicted.npy", dataset=ON_PREDICTED_DATASETS)
SAVED_MODEL = 'trained.model'
SAVED_THRESHOLS = 'thresholds.npy'
SAVED_BIN_PREDS = 'binarized_predictions.npy'
SAVED_DICES = 'dice_scores.npy'


rule all:
    input:
        predicted,
        {SAVED_MODEL},
        {SAVED_PREDS},
        {SAVED_THRESHOLS},
        {SAVED_BIN_PREDS},
        {SAVED_DICES}

rule train_model:
    input:
        val_dataset = datasets_idx[0]
    output:
        {SAVED_MODEL}
    shell:
        'python {TRAIN_SCRIPT} -cp {CONFIG_PATH} -tid {TRAIN_IDX} -vid {input.val_dataset} -ld {LOGS_TO_TNSBRD} -smp {SAVED_MODEL} '

rule predict_val:
    input:
        {SAVED_MODEL},
        val_dataset = datasets_idx[0]
    output:
        val_predicted = predicted[0]
    shell:
        'python {PREDICT_SCRIPT} -cp {CONFIG_PATH} -ip {input.val_dataset} -m {SAVED_MODEL} -pp {output.val_predicted}'

rule predict_test:
    input:
        {SAVED_MODEL},
        test_dataset = datasets_idx[1]
    output:
        test_predicted = predicted[1]
    shell:
        'python {PREDICT_SCRIPT} -cp {CONFIG_PATH} -ip {input.test_dataset} -m {SAVED_MODEL} -pp {output.test_predicted}'

rule find_threshold:
    input:
        val_dataset = datasets_idx[0],
        val_preds = predicted[0]
    output:
        {SAVED_THRESHOLS}
    shell:
        'python {FIND_TRESHOLD} -cp {CONFIG_PATH} -ip {input.val_dataset} -pp {input.val_preds} -thp {SAVED_THRESHOLS}'

rule binarize:
    input:
        test_dataset = datasets_idx[1],
        test_preds = predicted[1],
        {SAVED_THRESHOLS}
    output:
        {SAVED_BIN_PREDS}
    shell:
        'python {BINARIZE} -cp {CONFIG_PATH}  -ip {input.test_dataset} -pp {input.test_preds} -thp {SAVED_THRESHOLS} -p {SAVED_BIN_PREDS}'

rule compute_dices:
    input:
        test_dataset = datasets_idx[1],
        {SAVED_MODEL},
        {SAVED_BIN_PREDS}
    output:
        {SAVED_DICES}
    shell:
        'python {COMPUTE_DICES} -cp {CONFIG_PATH} -ip {input.test_dataset} -mp {SAVED_MODEL} -thp {SAVED_THRESHOLS} -p {SAVED_DICES}'


