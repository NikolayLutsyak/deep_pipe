n_epochs = 60
batch_size = 20
n_iters_per_batch = 100
patch_size = [40 40 14]

dataset = dataset_wrapper:cached
    dataset = dataset_wrapper:normalized
        mean = true
        std = true
        dataset = dataset_wrapper:msegm
            dataset = dataset:isles2017
                metadata_rpath = "isles2017_crop.csv"
                data_path = "/nmnt/x04-hdd/ISLES/"

batch_iter_factory = batch_iter_factory:inf
    n_iters_per_batch = n_iters_per_batch

    get_batch_iter = pdp:pipeline
        @lazy
        batch_size = batch_size
        transformers = [
            batch_iter:patch_3d_part(
                x_patch_sizes = [patch_size]
                y_patch_size = patch_size
                ids = train_ids
                load_x = load_x
                load_y = load_y
            )
            pdp:one2one(
                f = batch_iter:y_to_volume
                pack = true
            )
        ]

split = split:cv_111
    n_splits = 5
    val_size = 5
    dataset = dataset

batch_predict = batch_predict:patch_3d_volume
    x_patch_sizes = [patch_size]
    y_patch_size = patch_size

// model

model_core = model_core:res_regressor
    n_chans_in = dataset.n_chans_mscan
    units = 3200

T = meta:import
    module = "torch"

logits2pred = T.nn.ReLU()

model = model:torch
    model_core = model_core
    logits2pred = logits2pred
    logits2loss = T.nn.MSELoss()
    optimize = T.optim.Adam

frozen_model = frozen_model:torch
    model_core = model_core
    logits2pred = logits2pred
    restore_model_path = console.restore_model_path

train = train:proto
    @lazy
    atol = 0.01
    lr_dec_mul = 0.7
    lr_init = 0.1
    n_epochs = n_epochs
    patience = 5
    rtol = 0.03
    log_path = console.log_path

    load_x = load_x
    load_y = load_y

    model = model
    train_batch_iter_factory = batch_iter_factory
    val_ids = val_ids
    batch_predict = batch_predict

// commands

train_model = command:train_model
    train = train
    model = model
    save_model_path = console.save_model_path

predict = command:predict
    ids = ids
    output_path = console.output_path
    load_x = load_x
    frozen_model = frozen_model
    batch_predict = batch_predict

build_experiment = experiment:flat
    makefile = "regression"
    config_path = console.config_path
    experiment_path = console.experiment_path
    split = split

// misc

load_x = dataset.load_x
load_y = dataset.load_y

console = io:console()

train_ids = io:json
    path = console.train_ids_path
val_ids = io:json
    path = console.val_ids_path
ids = io:json
    path = console.ids_path
