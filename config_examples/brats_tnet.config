from .brats_base import *
from .assets.batch_iter.patch_3d import *
from .assets.model.tnet3d import *
from .assets.problem.segm_torch import *

import torch

from dpipe.torch.utils import NormalizedSoftmaxCrossEntropy
from dpipe.batch_predict.patch_3d_fixed import Patch3DFixedPredictor

batch_size = 1
activation = torch.nn.functional.relu

stride = 2

structure = [
    [[],   [8, 16],  [32, 64, 64, 16]],
    [[8],  [8, 8],   [32, 32]],
    [[16], [16, 16], [32, 32]],
    [[32], [32, 32], [96, 64]],
    [[64, 64, 64]]
]

# Batch iter
predictor_spatial_size = [[177, 209, 177]]

logits2loss = NormalizedSoftmaxCrossEntropy(n_classes=n_chans_out)

batch_predict = Patch3DFixedPredictor(
    x_patch_sizes=[predictor_spatial_size],
    y_patch_size=predictor_spatial_size,
    padding_mode="min",
)

optimize = torch.optim.Adam
