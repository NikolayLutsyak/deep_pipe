from .brats_base import *
from .assets.batch_iter.patch_3d import *
from .assets.model.tnet3d import *
from .assets.problem.segm import *

import torch

from dpipe.torch.utils import softmax
from dpipe.batch_predict.patch_3d_fixed import Patch3DFixedPredictor
from dpipe.train.lr_policy import Decreasing
from dpipe.medim.metrics import dice_scores

activation = torch.nn.functional.relu
logits2pred = softmax
logits2loss = torch.SoftmaxCrossEntropy(n_classes=n_chans_out)
optimize = torch.optim.Adam

stride = 3

structure = [
    [[], [], [8]],
    [[8, 8], [16, 16, 32, 32], [64]],
    [[16, 16, 32, 32, 64, 64]],
]

y_patch_size = [145, 177, 145]
x_patch_sizes = [y_patch_size]

predictor_spatial_size = [181, 208, 181]

batch_predict = Patch3DFixedPredictor(
    x_patch_sizes=[predictor_spatial_size],
    y_patch_size=predictor_spatial_size,
    padding_mode="min",
)

batch_size = 16

n_epochs = 120
n_iters_per_batch = 100

val_metrics = {
    "dice_scores": dice_scores
}

lr_policy = Decreasing(
    atol=0.01,
    lr_dec_mul=0.5,
    lr_init=0.1,
    patience=5,
    rtol=0.02,
)
