from .assets.batch_iter.patch_3d import *
from .brats_base import *
from .assets.model.tnet3d import *
from .assets.problem.segm import *

from functools import partial

import torch
import torch.nn as nn

from dpipe.torch.utils import softmax_cross_entropy
from dpipe.batch_predict.patch_3d_fixed import Patch3DFixedPredictor
from dpipe.train.lr_policy import Decreasing

activation = torch.nn.functional.relu
logits2pred = partial(nn.functional.softmax, dim=1)
logits2loss = softmax_cross_entropy
optimize = torch.optim.Adam

stride = 3

structure = [
    [[], [], [8]],
    [[8, 8], [16, 16, 32, 32], [64]],
    [[16, 16, 32, 32, 64, 64]],
]

y_patch_size = [145, 181, 145]
x_patch_sizes = [y_patch_size]

batch_size = 16

n_epochs = 120
n_iters_per_epoch = 100

lr_policy = Decreasing(
    atol=0.01,
    lr_dec_mul=0.5,
    lr_init=0.1,
    patience=5,
    rtol=0.02,
)

predictor_spatial_size = [181, 208, 181]
predictor_x_patch_sizes = [predictor_spatial_size]
predictor_y_patch_size = predictor_spatial_size
