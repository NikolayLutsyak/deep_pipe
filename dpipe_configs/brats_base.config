from .assets.core import *
from .assets.data_source.cobrain.brats import *
from .assets.dataset.brats import *

from .assets.problem.simple_problem import *

import numpy as np

from dpipe.medim.metrics import aggregate_metric
from dpipe.medim.metrics import multichannel_dice_score

load_y = dataset.load_segm
n_chans_out = segm_decoding_matrix.shape[0]

get_class = partial(np.argmax, axis=0)
segm_prob2msegm = lambda x: segm2msegm(get_class(x))
dice_metric = lambda x, y: multichannel_dice_score(segm2msegm(x), segm_prob2msegm(y))


final_metrics = {
    'dice': dice_metric
}

val_metrics = {
    "dice_scores": aggregate_metric(
        # lazy
        metric=dice_metric
    )
}
