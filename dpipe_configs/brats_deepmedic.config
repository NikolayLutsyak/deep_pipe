from .brats_base import *
from .assets.batch_iter.patch_3d_strat import *
from .assets.model.deepmedic_els import *

from functools import partial

import torch
from torch.nn.functional import softmax, relu

from dpipe.torch.utils import softmax_cross_entropy
from dpipe.train.lr_policy import Schedule

activation = partial(relu, inplace=True)
logits2pred = partial(softmax, dim=1)
logits2loss = softmax_cross_entropy

downsample = 'avg'
upsample = 'neighbour'
dropout = False

x_patch_sizes = [[25, 25, 25], [57, 57, 57]]
y_patch_size = [9, 9, 9]

batch_size = 128

n_epochs = 120
n_iters_per_epoch = 200

# Batch iter
nonzero_fraction = 0.5

lr_init = 0.1

epoch2lr_dec_mul = {
    90: 0.1,
    105: 0.1,
}

lr_policy = Schedule(
    lr_init=lr_init,
    epoch2lr_dec_mul=epoch2lr_dec_mul
)

optimize = torch.optim.SGD(
    # lazy
    lr=lr_init,
    momentum=0.9,
    nesterov=True
)

predictor_x_patch_sizes = [[106, 106, 106], [138, 138, 138]]
predictor_y_patch_size = [90, 90, 90]
